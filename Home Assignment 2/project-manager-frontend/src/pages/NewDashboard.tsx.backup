import { useState, useEffect } from 'react';
import type { FormEvent } from 'react';
import { useNavigate } from 'react-router-dom';
import { projectsAPI } from '../services/api';
import { useAuth } from '../contexts/AuthContext';
import type { Project } from '../types';
import Layout from '../components/Layout';

const Dashboard = () => {
  const [projects, setProjects] = useState<Project[]>([]);
  const [showModal, setShowModal] = useState(false);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const navigate = useNavigate();
  const { user } = useAuth();

  useEffect(() => {
    fetchProjects();
  }, []);

  const fetchProjects = async () => {
    try {
      const data = await projectsAPI.getAll();
      setProjects(data);
    } catch (err: any) {
      setError('Failed to load projects');
    }
  };

  const handleCreateProject = async (e: FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      await projectsAPI.create({ title, description: description || undefined });
      setSuccessMessage('Project created successfully!');
      setShowModal(false);
      setTitle('');
      setDescription('');
      fetchProjects();
      setTimeout(() => setSuccessMessage(''), 3000);
    } catch (err: any) {
      setError(err.response?.data?.message || 'Failed to create project');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteProject = async (id: number) => {
    if (!window.confirm('Are you sure you want to delete this project?')) {
      return;
    }

    try {
      await projectsAPI.delete(id);
      setSuccessMessage('Project deleted successfully!');
      fetchProjects();
      setTimeout(() => setSuccessMessage(''), 3000);
    } catch (err: any) {
      setError('Failed to delete project');
    }
  };

  // Calculate statistics from real projects data
  const totalProjects = projects.length;
  const completedProjects = 0; // Can be calculated based on task completion
  const delayedProjects = 0; // Can be calculated based on due dates
  const ongoingProjects = projects.length; // All active projects
  
  // Calculate overall progress (0% for now, can be enhanced later)
  const averageProgress = 0;

  return (
    <div style={styles.container}>
      {/* Sidebar */}
      <aside style={styles.sidebar}>
        <div style={styles.logo}>
          <div style={styles.logoIcon}>ÔøΩ</div>
          <span style={styles.logoText}>PathLock</span>
        </div>

        <button onClick={() => setShowModal(true)} style={styles.createButton}>
          <span style={styles.plusIcon}>+</span>
          Create new project
        </button>

        <nav style={styles.nav}>
          <button style={styles.navItemActive} onClick={() => navigate('/dashboard')}>
            <span style={styles.navIcon}>üìä</span>
            Dashboard
          </button>
          <button style={styles.navItem} onClick={() => navigate('/projects')}>
            <span style={styles.navIcon}>üìÅ</span>
            Projects
          </button>
        </nav>
      </aside>

      {/* Main Content */}
      <div style={styles.mainContent}>
        {/* Top Header */}
        <header style={styles.header}>
          <h1 style={styles.pageTitle}>Dashboard</h1>
          <div style={styles.headerRight}>
            <div style={styles.userProfile} onClick={() => navigate('/profile')}>
              {profileImage ? (
                <img src={profileImage} alt="Profile" style={styles.avatarImage} />
              ) : (
                <div style={styles.avatar}>
                  {user?.username?.charAt(0).toUpperCase()}
                </div>
              )}
              <div style={styles.userInfo}>
                <div style={styles.userName}>{user?.username || 'User'}</div>
                <div style={styles.userRole}>Product manager</div>
              </div>
            </div>
          </div>
        </header>

        {/* Content Area */}
        <div style={styles.content}>
          {/* Overview Section */}
          <div style={styles.section}>
            <div style={styles.sectionHeader}>
              <h2 style={styles.sectionTitle}>Overview</h2>
              <select style={styles.dropdown}>
                <option>Last 30 days</option>
                <option>Last 7 days</option>
                <option>Last 90 days</option>
              </select>
            </div>

            <div style={styles.statsGrid}>
              <div style={styles.statCard}>
                <div style={{ ...styles.statIcon, background: 'linear-gradient(135deg, #fb923c 0%, #f97316 100%)' }}>
                  üìÅ
                </div>
                <div style={styles.statContent}>
                  <div style={styles.statLabel}>Projects</div>
                  <div style={styles.statValue}>{totalProjects}</div>
                  <div style={styles.statChange}>Total active projects</div>
                </div>
              </div>
            </div>
          </div>

          {error && <div style={styles.errorMessage}>{error}</div>}
          {successMessage && <div style={styles.successMessage}>{successMessage}</div>}

          {/* Projects Section */}
          <div style={styles.mainGrid}>
            <div style={styles.projectSection}>
              <div style={styles.projectHeader}>
                <h2 style={styles.sectionTitle}>Project summary</h2>
                <div style={styles.filters}>
                  <select style={styles.filterDropdown}>
                    <option>Project</option>
                  </select>
                  <select style={styles.filterDropdown}>
                    <option>Project manager</option>
                  </select>
                  <select style={styles.filterDropdown}>
                    <option>Status</option>
                  </select>
                </div>
              </div>

              <div style={styles.tableContainer}>
                <table style={styles.table}>
                  <thead>
                    <tr style={styles.tableHeader}>
                      <th style={styles.th}>Name</th>
                      <th style={styles.th}>Project manager</th>
                      <th style={styles.th}>Due date</th>
                      <th style={styles.th}>Status</th>
                      <th style={styles.th}>Progress</th>
                      <th style={styles.th}>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {projects.length === 0 ? (
                      <tr>
                        <td colSpan={6} style={{ ...styles.td, textAlign: 'center', padding: '40px', color: '#9ca3af' }}>
                          No projects yet. Click "Create new project" to get started!
                        </td>
                      </tr>
                    ) : (
                      projects.slice(0, 5).map((project) => {
                        return (
                          <tr key={project.id} style={styles.tableRow}>
                            <td style={styles.td}>{project.title}</td>
                            <td style={styles.td}>{user?.username || 'You'}</td>
                            <td style={styles.td}>{new Date(project.createdAt).toLocaleDateString()}</td>
                            <td style={styles.td}>
                              <span style={{ ...styles.statusCompleted, backgroundColor: '#dbeafe', color: '#1e40af' }}>
                                Active
                              </span>
                            </td>
                            <td style={styles.td}>
                              <div style={{ ...styles.progressCircle, borderColor: '#10b981', color: '#10b981' }}>
                                0%
                              </div>
                            </td>
                            <td style={styles.td}>
                              <div style={{ display: 'flex', gap: '8px' }}>
                                <button
                                  onClick={() => navigate(`/projects/${project.id}`)}
                                  style={styles.viewButton}
                                >
                                  View
                                </button>
                                <button
                                  onClick={() => handleDeleteProject(project.id)}
                                  style={styles.deleteButton}
                                >
                                  Delete
                                </button>
                              </div>
                            </td>
                          </tr>
                        );
                      })
                    )}
                  </tbody>
                </table>
              </div>
            </div>

            {/* Progress Card */}
            <div style={styles.progressCard}>
              <div style={styles.progressHeader}>
                <h3 style={styles.progressTitle}>Overall Progress</h3>
                <select style={styles.smallDropdown}>
                  <option>All</option>
                </select>
              </div>

              <div style={styles.progressCircleContainer}>
                <svg width="200" height="200" viewBox="0 0 200 200">
                  <circle
                    cx="100"
                    cy="100"
                    r="80"
                    fill="none"
                    stroke="#f3f4f6"
                    strokeWidth="20"
                  />
                  <circle
                    cx="100"
                    cy="100"
                    r="80"
                    fill="none"
                    stroke="url(#gradient)"
                    strokeWidth="20"
                    strokeDasharray={`${(averageProgress / 100) * 502.4} 502.4`}
                    strokeLinecap="round"
                    transform="rotate(-90 100 100)"
                  />
                  <defs>
                    <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="0%">
                      <stop offset="0%" stopColor="#10b981" />
                      <stop offset="50%" stopColor="#fbbf24" />
                      <stop offset="100%" stopColor="#ef4444" />
                    </linearGradient>
                  </defs>
                  <text x="100" y="95" textAnchor="middle" fontSize="36" fontWeight="bold" fill="#333">
                    {averageProgress}%
                  </text>
                  <text x="100" y="115" textAnchor="middle" fontSize="14" fill="#999">
                    Completed
                  </text>
                </svg>
              </div>

              <div style={styles.progressStats}>
                <div style={styles.progressStat}>
                  <div style={styles.progressStatValue}>{totalProjects}</div>
                  <div style={styles.progressStatLabel}>Total projects</div>
                </div>
                <div style={styles.progressStat}>
                  <div style={{ ...styles.progressStatValue, color: '#10b981' }}>{completedProjects}</div>
                  <div style={styles.progressStatLabel}>Completed</div>
                </div>
                <div style={styles.progressStat}>
                  <div style={{ ...styles.progressStatValue, color: '#fbbf24' }}>{delayedProjects}</div>
                  <div style={styles.progressStatLabel}>Delayed</div>
                </div>
                <div style={styles.progressStat}>
                  <div style={{ ...styles.progressStatValue, color: '#ef4444' }}>{ongoingProjects}</div>
                  <div style={styles.progressStatLabel}>On going</div>
                </div>
              </div>
            </div>
          </div>

          {/* Tasks Section */}
          <div style={styles.tasksSection}>
            <h2 style={styles.sectionTitle}>Recent Projects</h2>
            <p style={{ fontSize: '14px', color: '#6b7280', marginBottom: '20px' }}>
              {projects.length === 0 ? 'No projects yet' : `${projects.length} total projects`}
            </p>

            <div style={styles.taskList}>
              {projects.length === 0 ? (
                <div style={{ textAlign: 'center', padding: '40px', color: '#9ca3af' }}>
                  <p>Create your first project to get started!</p>
                </div>
              ) : (
                projects.slice(0, 3).map((project) => (
                  <div key={project.id} style={styles.taskItem}>
                    <span style={styles.taskBullet}>‚óè</span>
                    <span style={styles.taskText}>{project.title}</span>
                    <button
                      onClick={() => navigate(`/projects/${project.id}`)}
                      style={{ ...styles.taskStatusApproved, backgroundColor: '#dbeafe', color: '#1e40af', cursor: 'pointer' }}
                    >
                      View Details
                    </button>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Create Project Modal */}
      {showModal && (
        <div style={styles.modalOverlay} onClick={() => setShowModal(false)}>
          <div style={styles.modal} onClick={(e) => e.stopPropagation()}>
            <h2 style={styles.modalTitle}>Create New Project</h2>
            <form onSubmit={handleCreateProject} style={styles.form}>
              <div style={styles.formGroup}>
                <label style={styles.label}>Project Title *</label>
                <input
                  type="text"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  style={styles.input}
                  placeholder="Enter project title"
                  required
                />
              </div>
              <div style={styles.formGroup}>
                <label style={styles.label}>Description</label>
                <textarea
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  style={styles.textarea}
                  placeholder="Enter project description (optional)"
                  rows={4}
                />
              </div>
              <div style={styles.modalActions}>
                <button type="button" onClick={() => setShowModal(false)} style={styles.cancelBtn}>
                  Cancel
                </button>
                <button type="submit" disabled={loading} style={styles.submitBtn}>
                  {loading ? 'Creating...' : 'Create Project'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

const styles: { [key: string]: React.CSSProperties } = {
  container: {
    display: 'flex',
    minHeight: '100vh',
    backgroundColor: '#f8f9fa',
  },
  sidebar: {
    width: '240px',
    backgroundColor: '#1a1a1a',
    color: 'white',
    padding: '24px 16px',
    display: 'flex',
    flexDirection: 'column',
    gap: '24px',
  },
  logo: {
    display: 'flex',
    alignItems: 'center',
    gap: '12px',
    paddingBottom: '16px',
  },
  logoIcon: {
    width: '40px',
    height: '40px',
    borderRadius: '8px',
    background: 'linear-gradient(135deg, #ff6b35 0%, #ff8c42 100%)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: '20px',
  },
  logoText: {
    fontSize: '20px',
    fontWeight: 'bold',
  },
  createButton: {
    backgroundColor: 'white',
    color: '#1a1a1a',
    padding: '12px 16px',
    borderRadius: '8px',
    border: 'none',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: '500',
    display: 'flex',
    alignItems: 'center',
    gap: '8px',
  },
  plusIcon: {
    width: '20px',
    height: '20px',
    borderRadius: '50%',
    backgroundColor: '#ff6b35',
    color: 'white',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: '16px',
  },
  nav: {
    display: 'flex',
    flexDirection: 'column',
    gap: '4px',
  },
  navItem: {
    backgroundColor: 'transparent',
    color: '#999',
    padding: '12px 16px',
    borderRadius: '8px',
    border: 'none',
    cursor: 'pointer',
    fontSize: '14px',
    textAlign: 'left',
    display: 'flex',
    alignItems: 'center',
    gap: '12px',
  },
  navItemActive: {
    backgroundColor: 'white',
    color: '#1a1a1a',
    padding: '12px 16px',
    borderRadius: '8px',
    border: 'none',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: '500',
    textAlign: 'left',
    display: 'flex',
    alignItems: 'center',
    gap: '12px',
  },
  navIcon: {
    fontSize: '18px',
  },
  mainContent: {
    flex: 1,
    display: 'flex',
    flexDirection: 'column',
  },
  header: {
    backgroundColor: 'white',
    padding: '20px 40px',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderBottom: '1px solid #e5e7eb',
  },
  pageTitle: {
    fontSize: '28px',
    fontWeight: 'bold',
    color: '#1a1a1a',
    margin: 0,
  },
  headerRight: {
    display: 'flex',
    alignItems: 'center',
    gap: '16px',
  },
  searchBar: {
    display: 'flex',
    alignItems: 'center',
    backgroundColor: '#f3f4f6',
    borderRadius: '8px',
    padding: '8px 16px',
    gap: '8px',
    width: '300px',
  },
  searchIcon: {
    fontSize: '16px',
    color: '#6b7280',
  },
  searchInput: {
    border: 'none',
    backgroundColor: 'transparent',
    outline: 'none',
    flex: 1,
    fontSize: '14px',
  },
  notificationBtn: {
    backgroundColor: 'transparent',
    border: 'none',
    fontSize: '20px',
    cursor: 'pointer',
    padding: '8px',
  },
  userProfile: {
    display: 'flex',
    alignItems: 'center',
    gap: '12px',
    cursor: 'pointer',
    padding: '8px',
    borderRadius: '8px',
  },
  avatar: {
    width: '40px',
    height: '40px',
    borderRadius: '50%',
    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    color: 'white',
    fontWeight: 'bold',
  },
  avatarImage: {
    width: '40px',
    height: '40px',
    borderRadius: '50%',
    objectFit: 'cover' as const,
  },
  userInfo: {
    display: 'flex',
    flexDirection: 'column',
  },
  userName: {
    fontSize: '14px',
    fontWeight: '600',
    color: '#1a1a1a',
  },
  userRole: {
    fontSize: '12px',
    color: '#6b7280',
  },
  content: {
    padding: '32px 40px',
    flex: 1,
  },
  section: {
    marginBottom: '32px',
  },
  sectionHeader: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: '20px',
  },
  sectionTitle: {
    fontSize: '20px',
    fontWeight: '600',
    color: '#1a1a1a',
    margin: 0,
  },
  dropdown: {
    padding: '8px 16px',
    borderRadius: '6px',
    border: '1px solid #e5e7eb',
    backgroundColor: 'white',
    fontSize: '14px',
    cursor: 'pointer',
  },
  statsGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(4, 1fr)',
    gap: '24px',
  },
  statCard: {
    backgroundColor: 'white',
    borderRadius: '12px',
    padding: '24px',
    display: 'flex',
    alignItems: 'flex-start',
    gap: '16px',
  },
  statIcon: {
    width: '56px',
    height: '56px',
    borderRadius: '12px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: '24px',
  },
  statContent: {
    flex: 1,
  },
  statLabel: {
    fontSize: '14px',
    color: '#6b7280',
    marginBottom: '8px',
  },
  statValue: {
    fontSize: '28px',
    fontWeight: 'bold',
    color: '#1a1a1a',
    marginBottom: '8px',
  },
  statChange: {
    fontSize: '12px',
    color: '#10b981',
  },
  mainGrid: {
    display: 'grid',
    gridTemplateColumns: '2fr 1fr',
    gap: '24px',
    marginBottom: '32px',
  },
  projectSection: {
    backgroundColor: 'white',
    borderRadius: '12px',
    padding: '24px',
  },
  projectHeader: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: '20px',
  },
  filters: {
    display: 'flex',
    gap: '12px',
  },
  filterDropdown: {
    padding: '8px 12px',
    borderRadius: '6px',
    border: '1px solid #e5e7eb',
    fontSize: '13px',
    cursor: 'pointer',
  },
  tableContainer: {
    overflowX: 'auto',
  },
  table: {
    width: '100%',
    borderCollapse: 'collapse',
  },
  tableHeader: {
    borderBottom: '1px solid #e5e7eb',
  },
  th: {
    padding: '12px',
    textAlign: 'left',
    fontSize: '13px',
    fontWeight: '600',
    color: '#6b7280',
  },
  tableRow: {
    borderBottom: '1px solid #f3f4f6',
  },
  td: {
    padding: '16px 12px',
    fontSize: '14px',
    color: '#374151',
  },
  statusCompleted: {
    padding: '4px 12px',
    borderRadius: '12px',
    backgroundColor: '#d1fae5',
    color: '#065f46',
    fontSize: '12px',
    fontWeight: '500',
  },
  progressCircle: {
    width: '40px',
    height: '40px',
    borderRadius: '50%',
    border: '3px solid #10b981',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: '11px',
    fontWeight: '600',
    color: '#10b981',
  },
  viewButton: {
    padding: '6px 16px',
    borderRadius: '6px',
    border: '1px solid #e5e7eb',
    backgroundColor: 'white',
    fontSize: '13px',
    cursor: 'pointer',
    marginRight: '8px',
  },
  deleteButton: {
    padding: '6px 16px',
    borderRadius: '6px',
    border: '1px solid #fee2e2',
    backgroundColor: '#fef2f2',
    color: '#dc2626',
    fontSize: '13px',
    cursor: 'pointer',
  },
  progressCard: {
    backgroundColor: 'white',
    borderRadius: '12px',
    padding: '24px',
  },
  progressHeader: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: '24px',
  },
  progressTitle: {
    fontSize: '18px',
    fontWeight: '600',
    color: '#1a1a1a',
    margin: 0,
  },
  smallDropdown: {
    padding: '6px 12px',
    borderRadius: '6px',
    border: '1px solid #e5e7eb',
    fontSize: '13px',
    cursor: 'pointer',
  },
  progressCircleContainer: {
    display: 'flex',
    justifyContent: 'center',
    marginBottom: '24px',
  },
  progressStats: {
    display: 'grid',
    gridTemplateColumns: 'repeat(4, 1fr)',
    gap: '16px',
  },
  progressStat: {
    textAlign: 'center',
  },
  progressStatValue: {
    fontSize: '24px',
    fontWeight: 'bold',
    color: '#1a1a1a',
    marginBottom: '4px',
  },
  progressStatLabel: {
    fontSize: '12px',
    color: '#6b7280',
  },
  tasksSection: {
    backgroundColor: 'white',
    borderRadius: '12px',
    padding: '24px',
  },
  taskTabs: {
    display: 'flex',
    gap: '8px',
    marginTop: '20px',
    marginBottom: '20px',
    borderBottom: '1px solid #e5e7eb',
  },
  taskTab: {
    padding: '12px 20px',
    backgroundColor: 'transparent',
    border: 'none',
    fontSize: '14px',
    color: '#6b7280',
    cursor: 'pointer',
    borderBottom: '2px solid transparent',
  },
  taskTabActive: {
    padding: '12px 20px',
    backgroundColor: 'transparent',
    border: 'none',
    fontSize: '14px',
    color: '#1a1a1a',
    fontWeight: '600',
    cursor: 'pointer',
    borderBottom: '2px solid #1a1a1a',
  },
  badge: {
    padding: '2px 8px',
    borderRadius: '12px',
    backgroundColor: '#f3f4f6',
    fontSize: '12px',
    marginLeft: '8px',
  },
  taskList: {
    display: 'flex',
    flexDirection: 'column',
    gap: '16px',
  },
  taskItem: {
    display: 'flex',
    alignItems: 'center',
    gap: '12px',
    padding: '12px',
    borderRadius: '8px',
    backgroundColor: '#fafafa',
  },
  taskBullet: {
    color: '#ff6b35',
    fontSize: '20px',
  },
  taskText: {
    flex: 1,
    fontSize: '14px',
    color: '#374151',
  },
  taskStatusApproved: {
    padding: '4px 16px',
    borderRadius: '12px',
    backgroundColor: '#d1fae5',
    color: '#065f46',
    fontSize: '12px',
    fontWeight: '500',
  },
  taskStatusReview: {
    padding: '4px 16px',
    borderRadius: '12px',
    backgroundColor: '#fef3c7',
    color: '#92400e',
    fontSize: '12px',
    fontWeight: '500',
  },
  errorMessage: {
    backgroundColor: '#fee2e2',
    color: '#991b1b',
    padding: '12px 20px',
    borderRadius: '8px',
    marginBottom: '20px',
    border: '1px solid #fecaca',
  },
  successMessage: {
    backgroundColor: '#d1fae5',
    color: '#065f46',
    padding: '12px 20px',
    borderRadius: '8px',
    marginBottom: '20px',
    border: '1px solid #a7f3d0',
  },
  modalOverlay: {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0,0,0,0.5)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 1000,
  },
  modal: {
    backgroundColor: 'white',
    padding: '32px',
    borderRadius: '12px',
    width: '90%',
    maxWidth: '500px',
    boxShadow: '0 20px 25px -5px rgba(0,0,0,0.1)',
  },
  modalTitle: {
    fontSize: '24px',
    fontWeight: 'bold',
    marginBottom: '24px',
    color: '#1a1a1a',
  },
  form: {
    display: 'flex',
    flexDirection: 'column',
    gap: '20px',
  },
  formGroup: {
    display: 'flex',
    flexDirection: 'column',
    gap: '8px',
  },
  label: {
    fontSize: '14px',
    fontWeight: '500',
    color: '#374151',
  },
  input: {
    padding: '12px',
    border: '1px solid #e5e7eb',
    borderRadius: '8px',
    fontSize: '14px',
  },
  textarea: {
    padding: '12px',
    border: '1px solid #e5e7eb',
    borderRadius: '8px',
    fontSize: '14px',
    fontFamily: 'inherit',
    resize: 'vertical' as const,
  },
  modalActions: {
    display: 'flex',
    gap: '12px',
    justifyContent: 'flex-end',
    marginTop: '8px',
  },
  cancelBtn: {
    padding: '10px 20px',
    backgroundColor: '#f3f4f6',
    color: '#374151',
    border: 'none',
    borderRadius: '8px',
    fontSize: '14px',
    fontWeight: '500',
    cursor: 'pointer',
  },
  submitBtn: {
    padding: '10px 20px',
    backgroundColor: '#ff6b35',
    color: 'white',
    border: 'none',
    borderRadius: '8px',
    fontSize: '14px',
    fontWeight: '500',
    cursor: 'pointer',
  },
};

export default Dashboard;
